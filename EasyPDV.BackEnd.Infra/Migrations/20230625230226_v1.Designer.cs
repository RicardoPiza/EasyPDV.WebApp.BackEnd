// <auto-generated />
using System;
using EasyPDV.BackEnd.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyPDV.BackEnd.Infra.Migrations
{
    [DbContext(typeof(PdvDbContext))]
    [Migration("20230625230226_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.CancelledSale", b =>
                {
                    b.Property<Guid>("CancelledSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.HasKey("CancelledSaleId");

                    b.ToTable("CancelledSales", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.Cashier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CashierNumber")
                        .HasColumnType("int");

                    b.Property<string>("CashierResponsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cashier", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.IndividualSale", b =>
                {
                    b.Property<Guid>("IndividualSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.Property<Guid>("SoldProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndividualSaleId");

                    b.HasIndex("SoldProductId");

                    b.ToTable("IndividualSales", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.RegularSale", b =>
                {
                    b.Property<Guid>("RegularSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.HasKey("RegularSaleId");

                    b.ToTable("RegularSales", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.ReversedSale", b =>
                {
                    b.Property<Guid>("ReversedSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductChangeFromSoldProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductChangeToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.HasKey("ReversedSaleId");

                    b.HasIndex("ProductChangeFromSoldProductId");

                    b.HasIndex("ProductChangeToId");

                    b.ToTable("ReversedSales", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.SoldProduct", b =>
                {
                    b.Property<Guid>("SoldProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CancelledSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("RegularSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("SoldProductId");

                    b.HasIndex("CancelledSaleId");

                    b.HasIndex("RegularSaleId");

                    b.ToTable("SoldProducts", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.CashierBleed", b =>
                {
                    b.HasBaseType("EasyPDV.BackEnd.Domain.Entities.Cashier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.ToTable("CashierBleed");
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.CashierOpen", b =>
                {
                    b.HasBaseType("EasyPDV.BackEnd.Domain.Entities.Cashier");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.ToTable("CashierOpen", (string)null);
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.IndividualSale", b =>
                {
                    b.HasOne("EasyPDV.BackEnd.Domain.Entities.SoldProduct", "SoldProduct")
                        .WithMany()
                        .HasForeignKey("SoldProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoldProduct");
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.ReversedSale", b =>
                {
                    b.HasOne("EasyPDV.BackEnd.Domain.Entities.SoldProduct", "ProductChangeFrom")
                        .WithMany()
                        .HasForeignKey("ProductChangeFromSoldProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EasyPDV.BackEnd.Domain.Entities.Product", "ProductChangeTo")
                        .WithMany()
                        .HasForeignKey("ProductChangeToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductChangeFrom");

                    b.Navigation("ProductChangeTo");
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.SoldProduct", b =>
                {
                    b.HasOne("EasyPDV.BackEnd.Domain.Entities.CancelledSale", null)
                        .WithMany("CancelledSaleProducts")
                        .HasForeignKey("CancelledSaleId");

                    b.HasOne("EasyPDV.BackEnd.Domain.Entities.RegularSale", null)
                        .WithMany("SoldProducts")
                        .HasForeignKey("RegularSaleId");
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.CashierOpen", b =>
                {
                    b.HasOne("EasyPDV.BackEnd.Domain.Entities.Cashier", null)
                        .WithOne()
                        .HasForeignKey("EasyPDV.BackEnd.Domain.Entities.CashierOpen", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.CancelledSale", b =>
                {
                    b.Navigation("CancelledSaleProducts");
                });

            modelBuilder.Entity("EasyPDV.BackEnd.Domain.Entities.RegularSale", b =>
                {
                    b.Navigation("SoldProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
